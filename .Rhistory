## "nb"="W_size" are predicted data string
W_size <- pred_for_w(data_in_cut, win1, k, next_val)
sv <- data.frame(ab)
sv[,1] <- data.frame(ab)
## This while loop will generate a table for predicted values
#while(!is.na(nb[1]))
#while(!is.na(sv[1,win1]))
while(!(is.na(W_size[1] == 0)) && W_size[1] != 0)
#while(!(is.na(nb[1])) && nb[1] != 0)
{
W_size <- pred_for_w(data_in_cut, win1, k, next_val)[1]
# sv[,win1 + 1] <- data.frame(as.numeric(unlist(W_size)))
sv[,win1 + 1] <- (as.double(unlist(W_size)))
#sv[,win1 + 1] <- data.frame(W_size)
win1 <- win1 + 1
}
sv[,2] <- NA
sv <- sv[ , colSums(is.na(sv)) == 0]
#sv <- sv[ , colSums(sv[,2] == 0]
rmse_val <- NULL
mae_val <- NULL
#for(i in 3:ncol(sv)-1 )
for(i in 2:ncol(sv) )
{
rmse_t <- rmse(sv[,i]-sv[,1])
rmse_val <- append(rmse_val,rmse_t)
mae_t <- mae(sv[,i]-sv[,1])
mae_val <- append(mae_val,mae_t)
}
rmse_val
mae_val
perfect_w <- which.min(rmse_val)
output <- list("Optimum_W"= perfect_w,"RMSE_Values"=rmse_val,"Prediction"=sv)
output
sv
sv[,win1 + 1] <- (as.double(unlist(W_size[1])))
k <- 4
set.seed(1)
#----- Delete Capture last "next_val" digits from Data compare with forecasted walues with various "win" sizes and Calculate RMSE/MAE------##
#data_in <- data.frame(data_in)
if(!is.vector(data_in))
{
data_in <- data_in[, 1]
}
win1 <- 1
ab <- NULL
y <- max(c(length(data_in),nrow(data_in)))
y1 <- next_val
data_in_cut <- data_in[1:(y - y1)]
while(y1 != 0)
{
ab  <- append(ab,data_in[y-y1+1])
y1 <- y1 - 1
na.rm = TRUE
}
## "ab" is actual data string
## "nb"="W_size" are predicted data string
W_size <- pred_for_w(data_in_cut, win1, k, next_val)
sv <- data.frame(ab)
sv[,1] <- data.frame(ab)
## This while loop will generate a table for predicted values
#while(!is.na(nb[1]))
#while(!is.na(sv[1,win1]))
while(!(is.na(W_size[1] == 0)) && W_size[1] != 0)
#while(!(is.na(nb[1])) && nb[1] != 0)
{
W_size <- pred_for_w(data_in_cut, win1, k, next_val)
dg <- as.double(unlist(W_size[1]))
# sv[,win1 + 1] <- data.frame(as.numeric(unlist(W_size)))
#sv[,win1 + 1] <- (as.double(unlist(W_size[1])))
#sv[,win1 + 1] <- data.frame(W_size)
sv[,win1 + 1] <- data.frame(dg)
win1 <- win1 + 1
}
sv[,2] <- NA
sv <- sv[ , colSums(is.na(sv)) == 0]
#sv <- sv[ , colSums(sv[,2] == 0]
rmse_val <- NULL
mae_val <- NULL
#for(i in 3:ncol(sv)-1 )
for(i in 2:ncol(sv) )
{
rmse_t <- rmse(sv[,i]-sv[,1])
rmse_val <- append(rmse_val,rmse_t)
mae_t <- mae(sv[,i]-sv[,1])
mae_val <- append(mae_val,mae_t)
}
rmse_val
mae_val
typeof(dg)
dg <- as.double(unlist(W_size[1]))
dg
typeof(dg)
typeof(sv)
typeof(data.frame(dg))
k <- 4
set.seed(1)
#----- Delete Capture last "next_val" digits from Data compare with forecasted walues with various "win" sizes and Calculate RMSE/MAE------##
#data_in <- data.frame(data_in)
if(!is.vector(data_in))
{
data_in <- data_in[, 1]
}
win1 <- 1
ab <- NULL
y <- max(c(length(data_in),nrow(data_in)))
y1 <- next_val
data_in_cut <- data_in[1:(y - y1)]
while(y1 != 0)
{
ab  <- append(ab,data_in[y-y1+1])
y1 <- y1 - 1
na.rm = TRUE
}
## "ab" is actual data string
## "nb"="W_size" are predicted data string
W_size <- pred_for_w(data_in_cut, win1, k, next_val)
sv <- data.frame(ab)
sv[,1] <- data.frame(ab)
## This while loop will generate a table for predicted values
#while(!is.na(nb[1]))
#while(!is.na(sv[1,win1]))
while(!(is.na(W_size[1] == 0)) && W_size[1] != 0)
#while(!(is.na(nb[1])) && nb[1] != 0)
{
W_size <- pred_for_w(data_in_cut, win1, k, next_val)
dg <- as.double(unlist(W_size[1]))
# sv[,win1 + 1] <- data.frame(as.numeric(unlist(W_size)))
#sv[,win1 + 1] <- (as.double(unlist(W_size[1])))
#sv[,win1 + 1] <- data.frame(W_size)
sv[,win1 + 1] <- (dg)
win1 <- win1 + 1
}
sv[,2] <- NA
sv <- sv[ , colSums(is.na(sv)) == 0]
typeof(dg)
typeof(W_size)
g<- pred_for_w(data_in,2,2,5)
typeof(g)
dg <- (unlist(W_size[1]))
typeof(dg)
k <- 4
set.seed(1)
#----- Delete Capture last "next_val" digits from Data compare with forecasted walues with various "win" sizes and Calculate RMSE/MAE------##
#data_in <- data.frame(data_in)
if(!is.vector(data_in))
{
data_in <- data_in[, 1]
}
win1 <- 1
ab <- NULL
y <- max(c(length(data_in),nrow(data_in)))
y1 <- next_val
data_in_cut <- data_in[1:(y - y1)]
while(y1 != 0)
{
ab  <- append(ab,data_in[y-y1+1])
y1 <- y1 - 1
na.rm = TRUE
}
## "ab" is actual data string
## "nb"="W_size" are predicted data string
W_size <- pred_for_w(data_in_cut, win1, k, next_val)
sv <- data.frame(ab)
sv[,1] <- data.frame(ab)
## This while loop will generate a table for predicted values
#while(!is.na(nb[1]))
#while(!is.na(sv[1,win1]))
while(!(is.na(W_size[1] == 0)) && W_size[1] != 0)
#while(!(is.na(nb[1])) && nb[1] != 0)
{
W_size <- pred_for_w(data_in_cut, win1, k, next_val)
dg <- (unlist(W_size[1]))
# sv[,win1 + 1] <- data.frame(as.numeric(unlist(W_size)))
#sv[,win1 + 1] <- (as.double(unlist(W_size[1])))
#sv[,win1 + 1] <- data.frame(W_size)
sv[,win1 + 1] <- (dg)
win1 <- win1 + 1
}
sv[,2] <- NA
sv <- sv[ , colSums(is.na(sv)) == 0]
#sv <- sv[ , colSums(sv[,2] == 0]
rmse_val <- NULL
mae_val <- NULL
#for(i in 3:ncol(sv)-1 )
for(i in 2:ncol(sv) )
{
rmse_t <- rmse(sv[,i]-sv[,1])
rmse_val <- append(rmse_val,rmse_t)
mae_t <- mae(sv[,i]-sv[,1])
mae_val <- append(mae_val,mae_t)
}
rmse_val
typeof(sv)
typeof(ab)
typeof(dg)
W_size
W_size[1]
ab
typeof(ab)
typeof(data.frame(ab))
typeof(data.frame(ab))
#k <- optimum_k(data_in)
k <- 4
set.seed(1)
#----- Delete Capture last "next_val" digits from Data compare with forecasted walues with various "win" sizes and Calculate RMSE/MAE------##
#data_in <- data.frame(data_in)
if(!is.vector(data_in))
{
data_in <- data_in[, 1]
}
win1 <- 1
ab <- NULL
y <- max(c(length(data_in),nrow(data_in)))
y1 <- next_val
data_in_cut <- data_in[1:(y - y1)]
while(y1 != 0)
{
ab  <- append(ab,data_in[y-y1+1])
y1 <- y1 - 1
na.rm = TRUE
}
## "ab" is actual data string
## "nb"="W_size" are predicted data string
W_size <- pred_for_w(data_in_cut, win1, k, next_val)
sv <- data.frame(ab)
sv[,1] <- data.frame(ab)
## This while loop will generate a table for predicted values
#while(!is.na(nb[1]))
#while(!is.na(sv[1,win1]))
while(!(is.na(W_size[1] == 0)) && W_size[1] != 0)
#while(!(is.na(nb[1])) && nb[1] != 0)
{
W_size <- pred_for_w(data_in_cut, win1, k, next_val)
dg <- (unlist(W_size[1]))
# sv[,win1 + 1] <- data.frame(as.numeric(unlist(W_size)))
#sv[,win1 + 1] <- (as.double(unlist(W_size[1])))
#sv[,win1 + 1] <- data.frame(W_size)
sv[,win1 + 1] <- (dg)
win1 <- win1 + 1
}
sv[,2] <- NA
sv <- sv[ , colSums(is.na(sv)) == 0]
#sv <- sv[ , colSums(sv[,2] == 0]
rmse_val <- NULL
mae_val <- NULL
#for(i in 3:ncol(sv)-1 )
#for(i in 2:ncol(sv) )
#{
#    rmse_t <- rmse(sv[,i]-sv[,1])
#    rmse_val <- append(rmse_val,rmse_t)
#
#    mae_t <- mae(sv[,i]-sv[,1])
#    mae_val <- append(mae_val,mae_t)
#}
#rmse_val
#mae_val
#perfect_w <- which.min(rmse_val)
output <- list("Optimum_W"= perfect_w,"Prediction"=sv)
#return(perfect_w)
output
#k <- optimum_k(data_in)
k <- 4
set.seed(1)
#----- Delete Capture last "next_val" digits from Data compare with forecasted walues with various "win" sizes and Calculate RMSE/MAE------##
#data_in <- data.frame(data_in)
if(!is.vector(data_in))
{
data_in <- data_in[, 1]
}
win1 <- 1
ab <- NULL
y <- max(c(length(data_in),nrow(data_in)))
y1 <- next_val
data_in_cut <- data_in[1:(y - y1)]
while(y1 != 0)
{
ab  <- append(ab,data_in[y-y1+1])
y1 <- y1 - 1
na.rm = TRUE
}
## "ab" is actual data string
## "nb"="W_size" are predicted data string
W_size <- pred_for_w(data_in_cut, win1, k, next_val)
sv <- data.frame(ab)
sv[,1] <- data.frame(ab)
## This while loop will generate a table for predicted values
#while(!is.na(nb[1]))
#while(!is.na(sv[1,win1]))
#while(!(is.na(W_size[1] == 0)) && W_size[1] != 0)
#    #while(!(is.na(nb[1])) && nb[1] != 0)
#{
#    W_size <- pred_for_w(data_in_cut, win1, k, next_val)
#    dg <- (unlist(W_size[1]))
#    # sv[,win1 + 1] <- data.frame(as.numeric(unlist(W_size)))
#    #sv[,win1 + 1] <- (as.double(unlist(W_size[1])))
#    #sv[,win1 + 1] <- data.frame(W_size)
#    sv[,win1 + 1] <- (dg)
#    win1 <- win1 + 1
#}
#sv[,2] <- NA
#sv <- sv[ , colSums(is.na(sv)) == 0]
#sv <- sv[ , colSums(sv[,2] == 0]
rmse_val <- NULL
mae_val <- NULL
#for(i in 3:ncol(sv)-1 )
#for(i in 2:ncol(sv) )
#{
#    rmse_t <- rmse(sv[,i]-sv[,1])
#    rmse_val <- append(rmse_val,rmse_t)
#
#    mae_t <- mae(sv[,i]-sv[,1])
#    mae_val <- append(mae_val,mae_t)
#}
#rmse_val
#mae_val
#perfect_w <- which.min(rmse_val)
output <- list("Optimum_W"= perfect_w,"Prediction"=sv)
#return(perfect_w)
output
library(PSF)
optimum_w(iris[2],4)
optimum_k(iris[2])
optimum_k(iris[2])
optimum_k(iris[2])
optimum_k(iris[2])
optimum_k(iris[2])
optimum_k(iris[2])
optimum_k(iris[2])
optimum_k(iris[2])
optimum_k(iris[2])
optimum_k(iris[2])
optimum_k(iris[2])
optimum_k(iris[2])
optimum_k(iris[2])
optimum_k(iris[2])
pred_for_w(iris[2],3,3,5)
library(PSF)
pred_for_w(iris[2],3,3,5)
pred_for_w(iris[2],3,3,5)[1]
f<- pred_for_w(iris[2],3,3,5)[1]
typeof(f)
unlist(f)
d <- unlist(f)
typeof(d)
optimum_w(iris[2],5)
library(PSF)
optimum_w(iris[2],5)
optimum_w(iris[2],6)
pred_for_w(iris[2],3,3,5)
AUTO_PSF(iris[2],6)
pred_for_w(iris[2],3,3,5)
library(PSF)
AUTO_PSF(iris[2],6)
k <- optimum_k(data_in)
w <- optimum_w(data_in,next_val)
pred <- pred_for_w(data_in,w,k,next_val)
pred <- unlist(pred)
options(warn=-1)
return(pred)
k <- optimum_k(data_in)
w <- optimum_w(data_in,next_val)
pred <- pred_for_w(data_in,w,k,next_val)[1]
pred <- unlist(pred)
options(warn=-1)
return(pred)
library(PSF)
library(PSF)
pred_for_w(iris[4])
pred_for_w(iris[4],3,4,5)
AUTO_PSF(iris[4],5)
AUTO_PSF(iris[4],500)
AUTO_PSF(iris[4],50)
AUTO_PSF(iris[4],10)
x <- sample(1:7, 100, replace = T)
y <- sample(1:4, 100, replace = T)
z <- rmse(x - y)
z
x <- sample(1:7, 100, replace = T)
y <- sample(1:4, 20, replace = T)
plot_PSF(x,y)
x <- sample(1:7, 100, replace = T)
y <- sample(1:4, 20, replace = T)
plot_PSF(x,y)
x <- sample(1:7, 100, replace = T)
y <- sample(1:4, 20, replace = T)
plot_PSF(x,y)
x <- sample(1:7, 100, replace = T)
y <- sample(1:4, 20, replace = T)
plot_PSF(x,y)
x <- sample(1:7, 100, replace = T)
y <- sample(1:4, 20, replace = T)
plot_PSF(x,y)
x <- sample(1:7, 100, replace = T)
y <- sample(1:4, 20, replace = T)
plot_PSF(x,y)
pred_for_w(x,3,4,5)
pred_for_w(x,3,4,5)
pred_for_w(x,3,4,5)
pred_for_w(x,3,5,5)
pred_for_w(y,3,5,5)
pred_for_w(y,1,5,5)
pred_for_w(x,3,4,5)
optimum_w(x,4)
optimum_w(iris[2],4)
optimum_w(iris[2],2)
optimum_w(iris[2],7)
x <- sample(1:7, 100, replace = T)    # data_in = x
y <- optimum_w (x, 4)        # next_val = 5
y$Optimum_W
y$RMSE_Values
y$Prediction
y
x <- sample(1:7, 100, replace = T)    # data_in = x
y <- optimum_w (x, 4)        # next_val = 5
y$Optimum_W
y$RMSE_Values
y$Prediction
y
library(devtools)
load_all()
library(PSF)
x <- sample(1:7, 100, replace = TRUE)
AUTO_PSF(x, 5)
x <- sample(1:7, 100, replace = TRUE)
AUTO_PSF(x, 5)
x <- sample(1:7, 100, replace = TRUE)
AUTO_PSF(x, 5)
x <- sample(1:7, 100, replace = TRUE)
AUTO_PSF(x, 5)
x <- sample(1:7, 100, replace = TRUE)
AUTO_PSF(x, 2)
library(PSF)
x <- sample(1:7, 100, replace = TRUE)    # data_in = x
y <- optimum_w (x, 2)
library(PSF)
x <- sample(1:7, 100, replace = TRUE)    # data_in = x
y <- optimum_w (x, 2)
library(PSF)
x <- sample(1:7, 100, replace = TRUE)    # data_in = x
y <- optimum_w (x, 2)
y
y
x <- sample(1:7, 100, replace = TRUE)    # data_in = x
y <- optimum_w (x, 2)
y
devtools::use_vignette("PSF_vignette")
data("iris")
iris
pred_for_w(iris[1],3,4,5)
pred_for_w(iris[1],3,3,5)
pred_for_w(iris[1],3,6,5)
pred_for_w(iris[1],3,2,5)
pred_for_w(iris[1],3,4,50)
pred_for_w(iris[1],3,4,10)
AUTO_PSF(iris[1],10)
AUTO_PSF(iris[1],3)
AUTO_PSF(iris[1],4)
AUTO_PSF(iris[1],5)
library(PSF)
ls()
AUTO_PSF(iris[1],5)
AUTO_PSF(iris[1],3)
AUTO_PSF(iris[1],4)
AUTO_PSF(iris[1],2)
AUTO_PSF(iris[1],3)
AUTO_PSF(iris[1],7)
AUTO_PSF(iris[1],9)
AUTO_PSF(iris[1],7)
AUTO_PSF(iris[1],5)
AUTO_PSF(iris[1],8)
AUTO_PSF(iris[1],8)
AUTO_PSF(iris[1],8)
AUTO_PSF(iris[1],2)
AUTO_PSF(iris[1],8)
AUTO_PSF(iris[1],3)
AUTO_PSF(iris[1],4)
AUTO_PSF(iris[1],3)
AUTO_PSF(iris[1],30)
AUTO_PSF(iris[1],31)
AUTO_PSF(iris[1],11)
AUTO_PSF(iris[1],3)
AUTO_PSF(iris[1],3)
AUTO_PSF(iris[1],3)
AUTO_PSF(iris[1],2)
AUTO_PSF(iris[1],8)
library(PSF)
AUTO_PSF(iris[1],8)
AUTO_PSF(iris[2],8)
AUTO_PSF(iris[2],8)
AUTO_PSF(iris[1],8)
AUTO_PSF(iris[1],3)
AUTO_PSF(iris[5],3)
AUTO_PSF(iris[5],4)
AUTO_PSF(iris[4],4)
AUTO_PSF(iris[4],2)
AUTO_PSF(iris[4],8)
AUTO_PSF(iris[1],8)
AUTO_PSF(iris[1],2)
AUTO_PSF(iris[2],2)
AUTO_PSF(iris[2],20)
AUTO_PSF(iris[3],20)
AUTO_PSF(iris[4],2)
AUTO_PSF(iris[1],2)
AUTO_PSF(iris[1],4)
AUTO_PSF(iris[1],3)
load_all()
library(PSF)
pred_for_w(iris[2],3,3,3)
pred_for_w(iris[4],3,3,3)
load_all()
library(PSF)
